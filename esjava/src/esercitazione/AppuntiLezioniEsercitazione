
Nomi delle classi vanno scritte con la prima lettera maiuscola.
Codice documentato:
Autore=nome e cognome o team.
data.
Cosa fa questa classe,cioè spiegare cosa si svolgera ni questa sezione.
Il nome della classe deve essere sempre sempre con la lettera maiuscola iniziale.
Va sempre dichiarata la cartella di inserimento: package cartella.
Buona pratica è commentare ogni parentesi graffa finale:
Interagire con l'utente,in modo tale da accompagnarlo a l meglio durante la sua UX(user experience).
Con ciò si intende con il progettare un programma A PROVA DI STUPIDO, ovvero,che chiunque deve essere
capace ad utilizzare quresto programma SENZA DIFFICOLTA',il programma deve:
1. Dire all'utebte se si deve inserire qualcosa(SE SI CHE COSA!0):
    1.1 Usando per esempio System.out.println();
    1.2 Salvare quello che viene inserito dentro una variabile.
2. Mantenere la finestra di input e output ordinati!
    2.1 L'utente deve leggere senza difficoltà la finestra.
3. Per ogni valorte restituito solitamente devono essere stampati in modo intuitivo.
    3.1 Specificare cosa sto stampando a video.
------------------------------------------------------------------------------------------------------------------------

***********************************************=======Introduzione=======***********************************************
Nomi delle classi vanno scritte con la prima lettera maiuscola.
Codice documentato:
Autore=nome e cognome o team.
data.
Cosa fa questa classe,cioè spiegare cosa si svolgera ni questa sezione.
Il nome della classe deve essere sempre sempre con la lettera maiuscola iniziale.
Va sempre dichiarata la cartella di inserimento: package cartella.
Buona pratica è commentare ogni parentesi graffa finale:
Interagire con l'utente,in modo tale da accompagnarlo a l meglio durante la sua UX(user experience).
Con ciò si intende con il progettare un programma A PROVA DI STUPIDO, ovvero,che chiunque deve essere capace
ad utilizzare quresto programma SENZA DIFFICOLTA',il programma deve:
1. Dire all'utebte se si deve inserire qualcosa(SE SI CHE COSA!0):
    1.1 Usando per esempio System.out.println();
    1.2 Salvare quello che viene inserito dentro una variabile.
2. Mantenere la finestra di input e output ordinati!
    2.1 L'utente deve leggere senza difficoltà la finestra.
3. Per ogni valorte restituito solitamente devono essere stampati in modo intuitivo.
    3.1 Specificare cosa sto stampando a video.

------------------------------------------------------------------------------------------------------------------------

***********************************************==========Cicli==========***********************************************
While :
    esegue le istruzioni all'interno del ciclo fino a quando la condizione non è rispettata.

do-while:
    uguale al while.
    apparte che la prima volta le istruzioni vengono sempre compiuta.

for:
    uguale al while,che fa N iterazioni.

------------------------------------------------------------------------------------------------------------------------

**************************************************=======Array=======**************************************************
Array:
È una struttura dati omogenea,che condivide la stessa tipologia di dati salvati all'interno del heap.All'interno della
memoria sarà salvata in modo indicizzato e consecutivo.
È una struttura dati di tipo primitivo.
esempio:
int[] nomeArray=new int [N];
limite capacità di memorizzazione:
nel caso io voglia più spazio e aggiungere un nuovo elemento devo creare un nuovo array e copiare quello vecchio al suo
interno e aggiungere quello che mi serve.
Mentre se devo inserire un elemneto specifico in un punto specifico devo usare la tecnica di prima,solo che mi fermo
nella copia quando volgio inserire l'elemento,inserirlo,poi continuare con la copia.
questi problemi si riscontrano anche nella cancellazione di un elemento.
Array list o list(classe di oggetti):
risolvono questo probloema.

Da Notare:
Errore a tempo di esecuzione se inserisco un valore di indice non esistente : Error IndexOutOfBoundException.
------------------------------------------------------------------------------------------------------------------------

*********************************************=======Funzioni/Metodi=======*********************************************
Metodi/Funzioni:
Cos'è?
È un blocco di codice,racchiuso tra le parentesi graffe,esegue una porzione di codice in base a ciò che
voglio implementare.(Implementabile e richiamabile)
Utilizzate:
Per non scrivere lo stesso codice più  e più volte;
Per facilitare la lettura del programma,cioé per aumentare la readability,maintenence del codice;
Signature/Firma:
Modificatore d'accesso(es. public);
tipo restituito dalla funzione ;
Nome funzione;
Parametri formali(parametri che scrivo dentro le parentesi tonde mentre dichiaro la funzione);
Parametri attuali(parametri che scrivo dentro le parentesi nel momento del richiamo della funzione);
------------------------------------------------------------------------------------------------------------------------

*******************************************======Programmazione Oggetti======*******************************************
Programmazione Oggetti:
Oggetto->possiede degli stati(attributi sono le variabili) e dei comportamenti(azioni);
Classe->è un impronta o stampo che va a descrivere il comportamento o lo stato oggetto;

Paradigmi:
# ereditarietà processo con la quale una o piu classi acquisiscono proprieta(attributi e metodi).
Con l'uso dell'ereditarietà l'informazione è recuperabile in maniera gerarchica.
superclasse->sottoclasse;

Oggetto:
Stati possono essere intesi come classiche variabili.
Comportamenti definiti tramite metodi(funzioni).

Classe:
è un tamplate,cioè come rappresento i miei oggetti all'interno del mondo SW.
Variabili locali->dichiarate all'interno dei metodi,non vale fuoi dal suo scoop;
Variabili d'istanza->quelle messe fuori dai metodi;
Varaibili di classe->fuori dai metodi ma con l'attributo static;

Costruttori,sono dei metodi che vanno utilizzati ogni volta che serve per dichiarare l'oggetto,serve per
istanziare l'oggetto al di fuori della classe;
Il nome della classe e il nome del costruttore devono essere uguali.
Quando istanzi un ogetto di una classe dopo (new) va inserito il costruttore.

Metodo toString(),è un metodo che implementa la stampa degli attributi della classe in base a come l'ho definita,mentre
se non dichiaro toString() stampa l'indirizzodella cella di memoria della classe;

@Override:serve per sovrascrivere un metodo già presente di base.

Overload:dichiaro lo stesso metodo che diferisce per parametri o tipo di ritorno.

Modificatori di accesso:
sono delle chiavi che aggiungiamo a variabili o metodi per cambiare il loro significato all'interno del nostro programma.
Ci da informazioni su come utilizzarli e accedervi.
di default sono protected(valide solo all'interno delle cartelle e nelle sottoclassi)
public si vedono sempre
private si puo accedere solo all'interno della classe (oppure fuori solo grazie a getter e setter)
incapsulare si intende nascondere l'implementazione.
------------------------------------------------------------------------------------------------------------------------

*************************************************======Astrazione======*************************************************
Processo che nasconde i dettagli implementativi all'utente.
(mostrare cosa fa l'oggetto non come lo fa)
una classe Astratta non può essere istanziata (istanziabile solo tramite override)
Metodoi Astratti:
posso dichiarare metodi A. solo se la classe è astratta;
Per dichiarare un metodo astratto,si usa la stessa signature di un metodo normale,
aggiungendo la keyword abstract;
Metodfo astratto non contiene il body;
------------------------------------------------------------------------------------------------------------------------

************************************************======Interfaccia======************************************************
Inetfaccia(classe astratta ma più restrittiva)è una parte di una classe che spiega al programmatore
come usarla(similead un contratto);
Defisisce tutti i metodi che devi implementare in base alle necessità del nostro dominio;
Per dichiarare l'intefaccia uso la keyword interface;
Costituita solo dalle intestazioni dei metodi pubblici  e dalle costanti pubbliche di classe;
Proggettista o programmatore sfruttano l'interfaccia per ricordare quali metodi devo implementare;
una classe può implementare più interfacce  e classi differenti possono implemnetare la stessa interfaccia;
------------------------------------------------------------------------------------------------------------------------

*************************************************======Eccezioni======**************************************************
Errore a tempo di compilazione=errori grammaticali o sintassi;
Eccezione=errore a tempo di esecuzione(errori anomali che il programmatore deve gestire,non devono capitare);
Quando un eccezione viene lanciata il programma si arresta,dobbiamo evitare questo tramite un if;
blocco che rappresenta la condizione->try{}
blocco che esegue l'eccezione->catch{}
blocco eseguito in qualsiasi caso->finally{}
